{
  "version": 3,
  "sources": ["../../hero-slider/src/modules/Manager.tsx", "../../hero-slider/src/modules/Controller.tsx", "../../hero-slider/src/modules/Accessibility.tsx", "../../hero-slider/dist/HeroSlider.module.css.js", "../../hero-slider/src/modules/Animations.tsx", "../../hero-slider/src/modules/ConsoleLogger.tsx", "../../.pnpm/react-intersection-observer@9.4.0_react@18.2.0/node_modules/react-intersection-observer/react-intersection-observer.modern.mjs", "../../hero-slider/src/modules/IntersectionObserver.tsx", "../../hero-slider/src/modules/IntervalTimer.ts", "../../hero-slider/src/modules/Autoplay.tsx", "../../hero-slider/src/modules/Layout.tsx", "../../hero-slider/src/modules/Settings.tsx", "../../hero-slider/src/utils/composeCssClasses.tsx", "../../hero-slider/dist/components/Buttons/index.module.css.js", "../../hero-slider/src/components/Buttons/index.tsx", "../../hero-slider/src/Orchestrator.tsx", "../../hero-slider/src/HeroSlider.tsx"],
  "sourcesContent": ["import React from 'react';\n\ntype Slide = {\n  ref: React.RefObject<HTMLElement>;\n  number: number;\n  label?: string;\n};\n\nexport interface ManagerProps {\n  /**\n   * Determines if on a mobile device. If true, the control buttons at the sides of the slider won't render.\n   * @default /Mobi|Android/i.test(navigator.userAgentData || navigator.userAgent)\n   */\n  isMobile?: boolean;\n}\n\ninterface GetSlide {\n  (ref: Slide['ref']): Slide | undefined;\n}\n\ninterface RegisterSlide {\n  (ref: Slide['ref'], label?: string): void;\n}\n\ninterface RemoveSlide {\n  (ref: Slide['ref']): void;\n}\n\ntype Action =\n  | {\n      type: 'update-is-mobile';\n      payload: boolean;\n    }\n  | {\n      type: 'register-slide';\n      payload: Pick<Slide, 'ref' | 'label'>;\n    }\n  | {\n      type: 'remove-slide';\n      payload: Slide['ref'];\n    };\ninterface State extends Required<ManagerProps> {\n  slides: Map<Slide['ref'], Slide>;\n  totalSlides: number;\n}\ntype ProviderProps = React.PropsWithChildren<{ manager?: ManagerProps }>;\n\n/**\n * Detecs if on a mobile device.\n */\nfunction isMobile(): boolean {\n  // But first, detect if running on the browser in case of SSR:\n  const isBrowser = typeof window !== 'undefined';\n\n  if (isBrowser) {\n    if (\n      navigator &&\n      /Mobi|Android/i.test(navigator.userAgentData || navigator.userAgent)\n    )\n      return true;\n    else return false;\n  }\n\n  return false;\n}\n\nconst defaultProps: Pick<State, keyof ManagerProps> = {\n  isMobile: isMobile()\n};\n\nconst ManagerStateContext = React.createContext<\n  | {\n      state: State;\n      getSlide: GetSlide;\n      registerSlide: RegisterSlide;\n      removeSlide: RemoveSlide;\n    }\n  | undefined\n>(undefined);\n\nfunction managerReducer(state: State, action: Action): State {\n  switch (action.type) {\n    case 'update-is-mobile': {\n      return { ...state, isMobile: state.isMobile };\n    }\n    case 'register-slide': {\n      const { slides } = state;\n      if (slides.has(action.payload.ref))\n        return { ...state, totalSlides: slides.size };\n      slides.set(action.payload.ref, {\n        ref: action.payload.ref,\n        number: slides.size + 1,\n        label: action.payload.label\n      });\n      return { isMobile: state.isMobile, slides, totalSlides: slides.size };\n    }\n    case 'remove-slide': {\n      const { slides } = state;\n      if (!slides.has(action.payload)) return state;\n      slides.delete(action.payload);\n      return { isMobile: state.isMobile, slides, totalSlides: slides.size };\n    }\n    default: {\n      throw new Error(`Unhandled action: [${JSON.stringify(action, null, 2)}]`);\n    }\n  }\n}\n\nfunction ManagerProvider({ children, manager }: ProviderProps) {\n  const [state, dispatch] = React.useReducer(managerReducer, {\n    isMobile: manager?.isMobile ?? defaultProps.isMobile,\n    slides: new Map(),\n    totalSlides: 0\n  } as State);\n\n  /**\n   * Finds a Slide by its React `ref`.\n   */\n  const getSlide: GetSlide = (ref) => {\n    return state.slides.get(ref);\n  };\n\n  /**\n   * Registers a rendered Slide.\n   */\n  const registerSlide: RegisterSlide = (ref, label) => {\n    dispatch({\n      type: 'register-slide',\n      payload: {\n        ref,\n        label\n      }\n    });\n  };\n\n  /**\n   * Removes a Slide.\n   */\n  const removeSlide: RemoveSlide = (ref) => {\n    dispatch({\n      type: 'remove-slide',\n      payload: ref\n    });\n  };\n\n  /**\n   * If `manager.isMobile` prop changes, update the current state.\n   */\n  React.useEffect(() => {\n    if (typeof manager?.isMobile === 'boolean')\n      dispatch({\n        type: 'update-is-mobile',\n        payload: manager?.isMobile\n      });\n  }, [manager?.isMobile]);\n\n  // NOTE: you *might* need to memoize this value\n  // Learn more in http://kcd.im/optimize-context\n  const value = {\n    state,\n    getSlide,\n    registerSlide,\n    removeSlide\n  };\n\n  return (\n    <ManagerStateContext.Provider value={value}>\n      {children}\n    </ManagerStateContext.Provider>\n  );\n}\n\nfunction useManager() {\n  const context = React.useContext(ManagerStateContext);\n\n  if (context === undefined) {\n    throw new Error('useManager must be used within a ManagerProvider');\n  }\n\n  return context;\n}\n\nexport { ManagerProvider, useManager };\n", "import React from 'react';\nimport { useManager } from './Manager';\n\ninterface GetNextSlide {\n  (aSlide?: number): number;\n}\n\ninterface GetPreviousSlide {\n  (aSlide?: number): number;\n}\n\ninterface ChangeSlide {\n  (nextSlide: number, slidingDirection?: 'forward' | 'backward'): void;\n}\n\ninterface GoToNextSlide {\n  (): void;\n}\n\ninterface GoToPreviousSlide {\n  (): void;\n}\n\ninterface GetSlidingCycleDuration {\n  (): number;\n}\n\nexport interface ControllerProps {\n  /**\n   * Sliding duration, in milliseconds.\n   * @default 500\n   */\n  slidingDuration?: number;\n  /**\n   * Sliding delay, in milliseconds.\n   * @default 200\n   */\n  slidingDelay?: number;\n  /**\n   * The initial slide can also be set, but the slider starts at the first slide by default.\n   * @default 1\n   */\n  initialSlide?: number;\n  /**\n   * Callback executed before sliding begins.\n   * The previous and next slide numbers are received as arguments, since the sliding event can be delayed, this is useful to handle state changes from the outside (e.g. fire custom animations inside the active slide).\n   * @param activeSlide\n   * @param nextSlide\n   * @default undefined\n   */\n  onBeforeSliding?(activeSlide: number, nextSlide: number): void;\n  /**\n   * Callback executed once the sliding starts similar to `onBeforeSliding`.\n   * @param activeSlide\n   * @param prevSlide\n   * @default undefined\n   */\n  onSliding?(activeSlide: number, prevSlide: number): void;\n  /**\n   * Callback executed after the sliding ends similar to `onBeforeChange`.\n   * @param activeSlide\n   * @param prevSlide\n   * @default undefined\n   */\n  onAfterSliding?(activeSlide: number, prevSlide: number): void;\n  /**\n   * Similar to pointers in C++, objects can work like pointers in JavaScript. React references are mutable objects that can be changed but will always point to an origin. If you declare an `object` and pass it as a reference, then the `current` property of the React reference `object` will be set to be equal to the `goToNextSlide` handler within the slider. This provides the developer with a way to change the slides \"from the outside\" of the bounds of the HeroSlider component.\n   */\n  goToNextSlidePointer?: React.MutableRefObject<GoToNextSlide | undefined>;\n  /**\n   * Similar to `nextSlide`, this sets the `object` to be equal to the `goToPreviousSlide` handler within the HeroSlider component.\n   */\n  goToPreviousSlidePointer?: React.MutableRefObject<\n    GoToPreviousSlide | undefined\n  >;\n}\n\ntype Action =\n  | {\n      type: 'start-sliding';\n      payload: {\n        nextSlide: State['activeSlide'];\n        slidingDirection?: Required<State['slidingDirection']>;\n      };\n    }\n  | { type: 'finish-sliding' }\n  | { type: 'set-delay-timeout'; payload: State['delayTimeout'] }\n  | { type: 'set-sliding-timeout'; payload: State['slidingTimeout'] };\ninterface State {\n  activeSlide: number;\n  prevActiveSlide: number;\n  isSliding: boolean;\n  slidingDirection: 'forward' | 'backward' | undefined;\n  delayTimeout?: NodeJS.Timeout;\n  slidingTimeout?: NodeJS.Timeout;\n}\ntype ProviderProps = React.PropsWithChildren<{ controller?: ControllerProps }>;\n\nconst defaultProps: Pick<\n  Required<ControllerProps>,\n  'slidingDuration' | 'slidingDelay' | 'initialSlide'\n> = {\n  slidingDuration: 500,\n  slidingDelay: 200,\n  initialSlide: 1\n};\n\nconst ControllerStateContext = React.createContext<\n  | {\n      state: State;\n      slidingDuration: number;\n      slidingDelay: number;\n      getNextSlide: GetNextSlide;\n      getPreviousSlide: GetPreviousSlide;\n      getSlidingCycleDuration: GetSlidingCycleDuration;\n      changeSlide: ChangeSlide;\n      goToNextSlide: GoToNextSlide;\n      goToPreviousSlide: GoToPreviousSlide;\n    }\n  | undefined\n  | undefined\n>(undefined);\n\nfunction settingsReducer(state: State, action: Action): State {\n  switch (action.type) {\n    case 'start-sliding': {\n      if (state.isSliding) return state;\n      return {\n        ...state,\n        isSliding: true,\n        activeSlide: action.payload.nextSlide,\n        prevActiveSlide: state.activeSlide,\n        slidingDirection: action.payload.slidingDirection\n      };\n    }\n    case 'finish-sliding': {\n      if (!state.isSliding) return state;\n      return {\n        ...state,\n        isSliding: false,\n        slidingDirection: undefined\n      };\n    }\n    case 'set-delay-timeout': {\n      return {\n        ...state,\n        delayTimeout: action.payload\n      };\n    }\n    case 'set-sliding-timeout': {\n      return {\n        ...state,\n        slidingTimeout: action.payload\n      };\n    }\n    default: {\n      throw new Error(`Unhandled action: [${JSON.stringify(action, null, 2)}]`);\n    }\n  }\n}\n\nfunction ControllerProvider({ children, controller }: ProviderProps) {\n  const params: Pick<\n    Required<ControllerProps>,\n    'slidingDuration' | 'slidingDelay' | 'initialSlide'\n  > = {\n    slidingDuration:\n      controller?.slidingDuration ?? defaultProps.slidingDuration,\n    slidingDelay: controller?.slidingDelay ?? defaultProps.slidingDelay,\n    initialSlide: controller?.initialSlide || defaultProps.initialSlide\n  };\n\n  const [state, dispatch] = React.useReducer(settingsReducer, {\n    activeSlide: params.initialSlide,\n    prevActiveSlide: 0,\n    isSliding: false,\n    slidingDirection: undefined,\n    delayTimeout: undefined,\n    slidingTimeout: undefined\n  } as State);\n\n  const { state: manager } = useManager();\n\n  /**\n   * Returns the slide after the given slide (`activeSlide` by default) based on the total amount of slides.\n   */\n  const getNextSlide: GetNextSlide = (aSlide = state.activeSlide) => {\n    const lastSlide = manager.totalSlides;\n\n    const isNotLastSlide = aSlide <= lastSlide - 1;\n\n    let nextSlide: number;\n    if (isNotLastSlide) nextSlide = aSlide + 1;\n    else nextSlide = 1;\n\n    return nextSlide;\n  };\n\n  /**\n   * Returns the previous slide similarly to `getNextSlide`.\n   */\n  const getPreviousSlide: GetPreviousSlide = (\n    aSlide: number = state.activeSlide\n  ) => {\n    const lastSlide = manager.totalSlides;\n\n    const isNotFirstSlide = aSlide > 1;\n\n    let prevSlide: number;\n    if (isNotFirstSlide) prevSlide = aSlide - 1;\n    else prevSlide = lastSlide;\n\n    return prevSlide;\n  };\n\n  /**\n   * Returns the total time it takes for the transition of each slide. It's the sum of the duration of the slide, plus the sliding delay of the animation. A safety factor of 1.1 is also used.\n   * e.g.: `(slidingDuration + slidingDelay) * 1.1`\n   */\n  const getSlidingCycleDuration: GetSlidingCycleDuration = () => {\n    return (params.slidingDuration + params.slidingDelay) * 1.1; // 110% safety factor.\n  };\n\n  /**\n   * `changeSlide` sets a new slide then executes `onSlidingHandler` to handle\n   * the smooth transition and set `isDoneSlidingWatcher.current` (like a pointer)\n   * as true. While `isDoneSliding` is true, no the slides won't change.\n   * The `onBeforeSliding` event is executed here. This triggers a useEffect\n   * that handles effects after the sliding is done.\n   */\n  const changeSlide = (\n    nextSlide: number,\n    slidingDirection?: 'forward' | 'backward'\n  ): void => {\n    if (state.isSliding) return;\n\n    if (controller?.onBeforeSliding)\n      controller.onBeforeSliding(state.activeSlide, nextSlide);\n\n    dispatch({\n      type: 'start-sliding',\n      payload: {\n        nextSlide,\n        slidingDirection\n      }\n    });\n  };\n\n  /**\n   * Changes the active slide to the next one.\n   */\n  const goToNextSlide: GoToNextSlide = () => {\n    changeSlide(getNextSlide(state.activeSlide), 'forward');\n  };\n\n  /**\n   * Changes the active slide to the previous one.\n   */\n  const goToPreviousSlide: GoToPreviousSlide = () => {\n    changeSlide(getPreviousSlide(state.activeSlide), 'backward');\n  };\n\n  /**\n   * Sets up the `goToNextSlide` pointer if it exists.\n   */\n  React.useEffect(() => {\n    if (controller?.goToNextSlidePointer)\n      controller.goToNextSlidePointer.current = goToNextSlide;\n  }, [controller?.goToNextSlidePointer, goToNextSlide]);\n\n  /**\n   * Sets up the `previousSlide` reference object if they exist.\n   */\n  React.useEffect(() => {\n    if (controller?.goToPreviousSlidePointer)\n      controller.goToPreviousSlidePointer.current = goToPreviousSlide;\n  }, [controller?.goToPreviousSlidePointer, goToNextSlide]);\n\n  /**\n   * Starts a `setTimeout` that will set `isSliding` as `false` after the time it takes for the slide to change passes.\n   * Saves the timeout ID to `slidingTimeout`. The `onSliding` and `onAfterSliding` events are executed here.\n   */\n  React.useEffect(() => {\n    const delayTimeout = setTimeout(() => {\n      if (state.isSliding && controller?.onSliding)\n        controller.onSliding(state.activeSlide, state.prevActiveSlide);\n    }, params.slidingDelay);\n\n    const slidingTimeout = setTimeout(() => {\n      dispatch({ type: 'finish-sliding' });\n      if (controller?.onAfterSliding)\n        controller.onAfterSliding(state.activeSlide, state.prevActiveSlide);\n    }, getSlidingCycleDuration());\n\n    dispatch({\n      type: 'set-delay-timeout',\n      payload: delayTimeout\n    });\n\n    dispatch({\n      type: 'set-sliding-timeout',\n      payload: slidingTimeout\n    });\n\n    /**\n     * Clearing any existing timeouts to avoid memory leaks, and clear event listener.\n     */\n    return () => {\n      clearTimeout(delayTimeout);\n      clearTimeout(slidingTimeout);\n    };\n  }, [state.activeSlide]);\n\n  // NOTE: you *might* need to memoize this value\n  // Learn more in http://kcd.im/optimize-context\n  const value = {\n    state,\n    slidingDuration: params.slidingDuration,\n    slidingDelay: params.slidingDelay,\n    getNextSlide,\n    getPreviousSlide,\n    getSlidingCycleDuration,\n    changeSlide,\n    goToNextSlide,\n    goToPreviousSlide\n  };\n\n  return (\n    <ControllerStateContext.Provider value={value}>\n      {children}\n    </ControllerStateContext.Provider>\n  );\n}\n\nfunction useController() {\n  const context = React.useContext(ControllerStateContext);\n\n  if (context === undefined) {\n    throw new Error('useController must be used within a ControllerProvider');\n  }\n\n  return context;\n}\n\nexport { ControllerProvider, useController };\n", "import React from 'react';\n\nimport { useController } from './Controller';\n\n/**\n * `AccessibilityOrientation` definition used for the `SliderProps.orientation` prop.\n * Used to define which swipes (depending on directions) will change the slides,\n * and where and how will the buttons render, if set to render.\n */\nexport enum AccessibilityOrientation {\n  VERTICAL = 'vertical',\n  HORIZONTAL = 'horizontal'\n}\n\nexport interface AccessibilityProps {\n  /**\n   * Controls render of the next and previous buttons.\n   * @default true\n   */\n  shouldDisplayButtons?: boolean;\n  /**\n   * When an arrow key is pressed, the active slide will change respectively to the pressed arrow.\n   * The left and down arrows will set the previous slide, and the right and up arrows will set the next slide.\n   * The left and right will only work if the slider is horizontal, and the up and down arrows will only work if the slider is vertical.\n   * @default true\n   */\n  shouldSlideOnArrowKeypress?: boolean;\n  /**\n   * The slider orientation can either set to be `horizontal` or `vertical`.\n   * The orientation sets the slide buttons respective to the orientation (e.g. if vertical, the buttons will be at the top and at the bottom).\n   * Swipe (touch) gestures in mobile devices to change slides will also be configured automatically depending on the orientation (e.g. if horizontal, swiping vertically won't change slides).\n   * @default 'horizontal'\n   */\n  orientation?: `${AccessibilityOrientation}`;\n  /**\n   * Pixel threshold for the Slider to register a swiping command to change slides.\n   * @default 50\n   */\n  thresholdToSlide?: number;\n}\n\ntype Action =\n  | {\n      type: 'start-motion';\n      payload: { x: number; y: number };\n    }\n  | {\n      type: 'update-motion';\n      payload: { x: number; y: number };\n    }\n  | { type: 'end-motion' };\ntype State = {\n  initialX: number | undefined;\n  initialY: number | undefined;\n  currentX: number | undefined;\n  currentY: number | undefined;\n};\ntype ProviderProps = React.PropsWithChildren<{\n  accessibility?: AccessibilityProps;\n}>;\n\nconst defaultProps: Required<AccessibilityProps> = {\n  shouldDisplayButtons: true,\n  shouldSlideOnArrowKeypress: true,\n  orientation: AccessibilityOrientation.HORIZONTAL,\n  thresholdToSlide: 50\n};\n\nconst AccessibilityStateContext = React.createContext<\n  | {\n      state: State;\n      shouldDisplayButtons: boolean;\n      orientation: AccessibilityOrientation;\n      onTouchStartHandler: (event: React.TouchEvent<HTMLDivElement>) => void;\n      onTouchMoveHandler: (event: React.TouchEvent<HTMLDivElement>) => void;\n      onTouchEndHandler: () => void;\n    }\n  | undefined\n>(undefined);\n\nfunction accessibilityReducer(state: State, action: Action): State {\n  switch (action.type) {\n    case 'start-motion': {\n      return {\n        initialX: action.payload.x,\n        initialY: action.payload.y,\n        currentX: undefined,\n        currentY: undefined\n      };\n    }\n    case 'update-motion': {\n      return {\n        initialX: state.initialX,\n        initialY: state.initialY,\n        currentX: action.payload.x,\n        currentY: action.payload.y\n      };\n    }\n    case 'end-motion': {\n      return {\n        initialX: undefined,\n        initialY: undefined,\n        currentX: undefined,\n        currentY: undefined\n      };\n    }\n    default: {\n      throw new Error(`Unhandled action: [${JSON.stringify(action, null, 2)}]`);\n    }\n  }\n}\n\nfunction AccessibilityProvider({ children, accessibility }: ProviderProps) {\n  const params: Required<AccessibilityProps> = {\n    shouldDisplayButtons:\n      accessibility?.shouldDisplayButtons ?? defaultProps.shouldDisplayButtons,\n    shouldSlideOnArrowKeypress:\n      accessibility?.shouldSlideOnArrowKeypress ??\n      defaultProps.shouldSlideOnArrowKeypress,\n    orientation: accessibility?.orientation || defaultProps.orientation,\n    thresholdToSlide:\n      accessibility?.thresholdToSlide ?? defaultProps.thresholdToSlide\n  };\n\n  const [state, dispatch] = React.useReducer(accessibilityReducer, {\n    initialX: undefined,\n    initialY: undefined,\n    currentX: undefined,\n    currentY: undefined\n  } as State);\n\n  const { goToNextSlide, goToPreviousSlide } = useController();\n\n  /**\n   * Sets the initial coordinates of the touch event.\n   */\n  const onTouchStartHandler = (event: React.TouchEvent<HTMLDivElement>) => {\n    dispatch({\n      type: 'start-motion',\n      payload: {\n        x: event.touches[0].clientX,\n        y: event.touches[0].clientY\n      }\n    });\n  };\n\n  /**\n   * Sets the current coordinates of the touch event to the state.\n   */\n  const onTouchMoveHandler = (event: React.TouchEvent<HTMLDivElement>) => {\n    dispatch({\n      type: 'update-motion',\n      payload: {\n        x: event.touches[0].clientX,\n        y: event.touches[0].clientY\n      }\n    });\n  };\n\n  /**\n   * Determines in which direction **and** sense (vector) the user is swiping.\n   * Animations are then set accordingly depending on which direction the user is dragging and the slide is changed.\n   * Finally the touch state is set back to the initial state, where everything is undefined.\n   */\n  const onTouchEndHandler = () => {\n    const diffX = Number(state.initialX) - Number(state.currentX);\n    const diffY = Number(state.initialY) - Number(state.currentY);\n\n    const isSlidingHorizontally: boolean = Math.abs(diffX) > Math.abs(diffY);\n    const isSliderSetHorizontally: boolean =\n      params.orientation === AccessibilityOrientation.HORIZONTAL;\n    const isSliderSetVertically: boolean =\n      params.orientation === AccessibilityOrientation.VERTICAL;\n\n    if (\n      isSlidingHorizontally &&\n      isSliderSetHorizontally &&\n      Math.abs(diffX) >= params.thresholdToSlide\n    ) {\n      const isSwipingRight = diffX > 0;\n      if (isSwipingRight) goToNextSlide();\n      else goToPreviousSlide();\n    } else if (\n      !isSlidingHorizontally &&\n      isSliderSetVertically &&\n      Math.abs(diffY) >= params.thresholdToSlide\n    ) {\n      const isSwipingUp = diffY > 0;\n      if (isSwipingUp) goToNextSlide();\n      else goToPreviousSlide();\n    }\n\n    dispatch({ type: 'end-motion' });\n  };\n\n  const onArrowKeypressHandler = (e: KeyboardEvent): void => {\n    if (!params.shouldSlideOnArrowKeypress) return;\n\n    const code = e.key || e.code || e.keyCode;\n\n    const isHorizontal =\n      params.orientation === AccessibilityOrientation.HORIZONTAL;\n\n    switch (true) {\n      // Left keypress.\n      case isHorizontal && (code === 'ArrowLeft' || code === 37):\n        goToPreviousSlide();\n        break;\n      // Right keypress.\n      case isHorizontal && (code === 'ArrowRight' || code === 39):\n        goToNextSlide();\n        break;\n      // Up keypress.\n      case !isHorizontal && (code === 'ArrowUp' || code === 38):\n        goToPreviousSlide();\n        break;\n      // Down keypress.\n      case !isHorizontal && (code === 'ArrowDown' || code === 40):\n        goToNextSlide();\n        break;\n      default: // Do nothing.\n    }\n  };\n\n  /**\n   * After mounting, similar to `componentDidMount`, setup the window event listeners for keydowns. The event handlers will be changing the slides if enabled to do so.\n   */\n  React.useEffect(() => {\n    window.addEventListener('keydown', onArrowKeypressHandler);\n    /**\n     * Clearing any existing timeouts to avoid memory leaks, and clear event listener.\n     */\n    return () => {\n      window.removeEventListener('keydown', onArrowKeypressHandler);\n    };\n  }, [onArrowKeypressHandler]);\n\n  // NOTE: you *might* need to memoize this value\n  // Learn more in http://kcd.im/optimize-context\n  const value = {\n    state,\n    shouldDisplayButtons: params.shouldDisplayButtons,\n    orientation: params.orientation as AccessibilityOrientation,\n    onTouchStartHandler,\n    onTouchMoveHandler,\n    onTouchEndHandler\n  };\n\n  return (\n    <AccessibilityStateContext.Provider value={value}>\n      {children}\n    </AccessibilityStateContext.Provider>\n  );\n}\n\nfunction useAccessibility() {\n  const context = React.useContext(AccessibilityStateContext);\n\n  if (context === undefined) {\n    throw new Error(\n      'useAccessibility must be used within a AccessibilityProvider'\n    );\n  }\n\n  return context;\n}\n\nexport { AccessibilityProvider, useAccessibility };\n", "'use strict';\n\nObject.defineProperty(exports, '__esModule', { value: true });\n\nvar HeroSliderModuleCss = {\"Wrapper\":\"HeroSlider-module_Wrapper__TaeBr\",\"fade-in\":\"HeroSlider-module_fade-in__5as8N\",\"Container\":\"HeroSlider-module_Container__EBtOP\",\"Sliding_Fade_In\":\"HeroSlider-module_Sliding_Fade_In__mRgKX\",\"slide-fade-in\":\"HeroSlider-module_slide-fade-in__s5eQJ\",\"Sliding_Left_To_Right\":\"HeroSlider-module_Sliding_Left_To_Right__XPZWw\",\"slide-left-to-right\":\"HeroSlider-module_slide-left-to-right__mPnzQ\",\"Sliding_Right_To_Left\":\"HeroSlider-module_Sliding_Right_To_Left__62-PD\",\"slide-right-to-left\":\"HeroSlider-module_slide-right-to-left__qlxI2\",\"Sliding_Top_To_Bottom\":\"HeroSlider-module_Sliding_Top_To_Bottom__9qXf-\",\"slide-top-to-bottom\":\"HeroSlider-module_slide-top-to-bottom__2AGIn\",\"Sliding_Bottom_To_Top\":\"HeroSlider-module_Sliding_Bottom_To_Top__fuFNk\",\"slide-bottom-to-top\":\"HeroSlider-module_slide-bottom-to-top__fkZ3m\"};\n\nexports[\"default\"] = HeroSliderModuleCss;\n//# sourceMappingURL=HeroSlider.module.css.js.map\n", "import React from 'react';\n\nimport HeroSliderModuleCss from '../HeroSlider.module.css';\nimport { AccessibilityOrientation, useAccessibility } from './Accessibility';\n\nenum SlidingAnimation {\n  TOP_TO_BOTTOM = 'top_to_bottom',\n  BOTTOM_TO_TOP = 'bottom_to_top',\n  LEFT_TO_RIGHT = 'left_to_right',\n  RIGHT_TO_LEFT = 'right_to_left',\n  FADE = 'fade'\n}\n\nexport interface AnimationsProps {\n  /**\n   * The sliding animations during transitions.\n   * @default 'wipe'\n   */\n  slidingAnimation?: 'fade' | 'wipe';\n  /**\n   * Fade in duration of the slider during mount, in milliseconds.\n   * @default 100\n   */\n  sliderFadeInDuration?: number;\n  /**\n   * Navbars fade in duration, in milliseconds.\n   * @default 1000\n   */\n  navbarFadeInDuration?: number;\n  /**\n   * Navbars fade in delay, in milliseconds.\n   * @default 500\n   */\n  navbarFadeInDelay?: number;\n  /**\n   * When `true`, the `hero-slider` will know which animation should be set next.\n   * For example, if the user is selecting the next slide, the animation would be different to the one if the user had selected the previous slide.\n   * The animations will essentially be the same, but moving to different directions (e.g. left or right, or right to left).\n   * @default true\n   */\n  shouldManageAnimationSequence?: boolean;\n}\n\ntype ProviderProps = React.PropsWithChildren<{ animations?: AnimationsProps }>;\n\ninterface GetSlidingAnimationCssClass {\n  (\n    activeSlide: number,\n    prevActiveSlide: number,\n    slidingDirection?: 'forward' | 'backward'\n  ): string;\n}\n\nconst SlidingAnimationCssClassMap: Record<SlidingAnimation, string> = {\n  [SlidingAnimation.FADE]: HeroSliderModuleCss.Sliding_Fade_In,\n  [SlidingAnimation.TOP_TO_BOTTOM]: HeroSliderModuleCss.Sliding_Top_To_Bottom,\n  [SlidingAnimation.BOTTOM_TO_TOP]: HeroSliderModuleCss.Sliding_Bottom_To_Top,\n  [SlidingAnimation.LEFT_TO_RIGHT]: HeroSliderModuleCss.Sliding_Left_To_Right,\n  [SlidingAnimation.RIGHT_TO_LEFT]: HeroSliderModuleCss.Sliding_Right_To_Left\n};\n\nconst defaultProps: Required<AnimationsProps> = {\n  slidingAnimation: 'wipe',\n  sliderFadeInDuration: 100,\n  navbarFadeInDuration: 1000,\n  navbarFadeInDelay: 500,\n  shouldManageAnimationSequence: true\n};\n\nconst AnimationsStateContext = React.createContext<\n  | {\n      sliderFadeInDuration: number;\n      navbarFadeInDuration: number;\n      navbarFadeInDelay: number;\n      getSlidingAnimationCssClass: GetSlidingAnimationCssClass;\n    }\n  | undefined\n>(undefined);\n\nfunction AnimationsProvider({ children, animations }: ProviderProps) {\n  const { orientation } = useAccessibility();\n\n  const params: Required<AnimationsProps> = {\n    slidingAnimation:\n      animations?.slidingAnimation || defaultProps.slidingAnimation,\n    sliderFadeInDuration:\n      animations?.sliderFadeInDuration ?? defaultProps.sliderFadeInDuration,\n    navbarFadeInDuration:\n      animations?.navbarFadeInDuration ?? defaultProps.navbarFadeInDuration,\n    navbarFadeInDelay:\n      animations?.navbarFadeInDelay ?? defaultProps.navbarFadeInDelay,\n    shouldManageAnimationSequence:\n      animations?.shouldManageAnimationSequence ??\n      defaultProps.shouldManageAnimationSequence\n  };\n\n  const getSlidingAnimationCssClass: GetSlidingAnimationCssClass = (\n    activeSlide,\n    prevActiveSlide,\n    slidingDirection\n  ): string => {\n    const getSlidingAnimation = (): SlidingAnimation => {\n      switch (params.slidingAnimation) {\n        case 'fade':\n          return SlidingAnimation.FADE;\n        case 'wipe': {\n          let direction: 'forward' | 'backward';\n\n          if (slidingDirection) direction = slidingDirection;\n          else {\n            const isSlidingForward = activeSlide > prevActiveSlide;\n            direction = isSlidingForward ? 'forward' : 'backward';\n          }\n\n          if (direction === 'forward')\n            return orientation === AccessibilityOrientation.HORIZONTAL\n              ? SlidingAnimation.RIGHT_TO_LEFT\n              : SlidingAnimation.BOTTOM_TO_TOP;\n          else\n            return orientation === AccessibilityOrientation.HORIZONTAL\n              ? SlidingAnimation.LEFT_TO_RIGHT\n              : SlidingAnimation.TOP_TO_BOTTOM;\n        }\n        default: {\n          throw new Error(\n            `Unhandled sliding animation: [${params.slidingAnimation}]`\n          );\n        }\n      }\n    };\n\n    return SlidingAnimationCssClassMap[getSlidingAnimation()];\n  };\n\n  // NOTE: you *might* need to memoize this value\n  // Learn more in http://kcd.im/optimize-context\n  const value = {\n    sliderFadeInDuration: params.sliderFadeInDuration,\n    navbarFadeInDuration: params.sliderFadeInDuration,\n    navbarFadeInDelay: params.sliderFadeInDuration,\n    getSlidingAnimationCssClass\n  };\n\n  return (\n    <AnimationsStateContext.Provider value={value}>\n      {children}\n    </AnimationsStateContext.Provider>\n  );\n}\n\nfunction useAnimations() {\n  const context = React.useContext(AnimationsStateContext);\n\n  if (context === undefined) {\n    throw new Error('useAnimations must be used within a AnimationsProvider');\n  }\n\n  return context;\n}\n\nexport { AnimationsProvider, useAnimations };\n", "export type LoggerLevels = {\n  verbose: boolean;\n  info: boolean;\n  debug: boolean;\n  warnings: boolean;\n  errors: boolean;\n};\n\n/**\n * ConsoleLogger singleton.\n */\nexport default class ConsoleLogger {\n  private constructor(private levels: LoggerLevels) {}\n\n  public log(...data: unknown[]): void {\n    // eslint-disable-next-line no-console\n    if (this.levels.verbose) console.log(...data);\n  }\n\n  public info(...data: unknown[]): void {\n    if (this.levels.info) console.info(...data);\n  }\n\n  public debug(...data: unknown[]): void {\n    if (this.levels.debug) console.debug(...data);\n  }\n\n  public warn(...data: unknown[]): void {\n    if (this.levels.warnings) console.warn(...data);\n  }\n\n  public error(...data: unknown[]): void {\n    if (this.levels.errors) console.error(...data);\n  }\n\n  private static instance: ConsoleLogger | undefined;\n\n  public static new(\n    levels: LoggerLevels = {\n      verbose: false,\n      info: false,\n      debug: false,\n      warnings: true,\n      errors: true\n    }\n  ): ConsoleLogger {\n    if (!this.instance) this.instance = new ConsoleLogger(levels);\n    else this.instance.levels = levels;\n    return this.instance;\n  }\n}\n", "import * as React from 'react';\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nconst observerMap = new Map();\nconst RootIds = new WeakMap();\nlet rootId = 0;\nlet unsupportedValue = undefined;\n/**\r\n * What should be the default behavior if the IntersectionObserver is unsupported?\r\n * Ideally the polyfill has been loaded, you can have the following happen:\r\n * - `undefined`: Throw an error\r\n * - `true` or `false`: Set the `inView` value to this regardless of intersection state\r\n * **/\n\nfunction defaultFallbackInView(inView) {\n  unsupportedValue = inView;\n}\n/**\r\n * Generate a unique ID for the root element\r\n * @param root\r\n */\n\nfunction getRootId(root) {\n  if (!root) return '0';\n  if (RootIds.has(root)) return RootIds.get(root);\n  rootId += 1;\n  RootIds.set(root, rootId.toString());\n  return RootIds.get(root);\n}\n/**\r\n * Convert the options to a string Id, based on the values.\r\n * Ensures we can reuse the same observer when observing elements with the same options.\r\n * @param options\r\n */\n\n\nfunction optionsToId(options) {\n  return Object.keys(options).sort().filter(key => options[key] !== undefined).map(key => {\n    return `${key}_${key === 'root' ? getRootId(options.root) : options[key]}`;\n  }).toString();\n}\n\nfunction createObserver(options) {\n  // Create a unique ID for this observer instance, based on the root, root margin and threshold.\n  let id = optionsToId(options);\n  let instance = observerMap.get(id);\n\n  if (!instance) {\n    // Create a map of elements this observer is going to observe. Each element has a list of callbacks that should be triggered, once it comes into view.\n    const elements = new Map();\n    let thresholds;\n    const observer = new IntersectionObserver(entries => {\n      entries.forEach(entry => {\n        var _elements$get;\n\n        // While it would be nice if you could just look at isIntersecting to determine if the component is inside the viewport, browsers can't agree on how to use it.\n        // -Firefox ignores `threshold` when considering `isIntersecting`, so it will never be false again if `threshold` is > 0\n        const inView = entry.isIntersecting && thresholds.some(threshold => entry.intersectionRatio >= threshold); // @ts-ignore support IntersectionObserver v2\n\n        if (options.trackVisibility && typeof entry.isVisible === 'undefined') {\n          // The browser doesn't support Intersection Observer v2, falling back to v1 behavior.\n          // @ts-ignore\n          entry.isVisible = inView;\n        }\n\n        (_elements$get = elements.get(entry.target)) == null ? void 0 : _elements$get.forEach(callback => {\n          callback(inView, entry);\n        });\n      });\n    }, options); // Ensure we have a valid thresholds array. If not, use the threshold from the options\n\n    thresholds = observer.thresholds || (Array.isArray(options.threshold) ? options.threshold : [options.threshold || 0]);\n    instance = {\n      id,\n      observer,\n      elements\n    };\n    observerMap.set(id, instance);\n  }\n\n  return instance;\n}\n/**\r\n * @param element - DOM Element to observe\r\n * @param callback - Callback function to trigger when intersection status changes\r\n * @param options - Intersection Observer options\r\n * @param fallbackInView - Fallback inView value.\r\n * @return Function - Cleanup function that should be triggered to unregister the observer\r\n */\n\n\nfunction observe(element, callback, options = {}, fallbackInView = unsupportedValue) {\n  if (typeof window.IntersectionObserver === 'undefined' && fallbackInView !== undefined) {\n    const bounds = element.getBoundingClientRect();\n    callback(fallbackInView, {\n      isIntersecting: fallbackInView,\n      target: element,\n      intersectionRatio: typeof options.threshold === 'number' ? options.threshold : 0,\n      time: 0,\n      boundingClientRect: bounds,\n      intersectionRect: bounds,\n      rootBounds: bounds\n    });\n    return () => {// Nothing to cleanup\n    };\n  } // An observer with the same options can be reused, so lets use this fact\n\n\n  const {\n    id,\n    observer,\n    elements\n  } = createObserver(options); // Register the callback listener for this element\n\n  let callbacks = elements.get(element) || [];\n\n  if (!elements.has(element)) {\n    elements.set(element, callbacks);\n  }\n\n  callbacks.push(callback);\n  observer.observe(element);\n  return function unobserve() {\n    // Remove the callback from the callback list\n    callbacks.splice(callbacks.indexOf(callback), 1);\n\n    if (callbacks.length === 0) {\n      // No more callback exists for element, so destroy it\n      elements.delete(element);\n      observer.unobserve(element);\n    }\n\n    if (elements.size === 0) {\n      // No more elements are being observer by this instance, so destroy it\n      observer.disconnect();\n      observerMap.delete(id);\n    }\n  };\n}\n\nconst _excluded = [\"children\", \"as\", \"triggerOnce\", \"threshold\", \"root\", \"rootMargin\", \"onChange\", \"skip\", \"trackVisibility\", \"delay\", \"initialInView\", \"fallbackInView\"];\n\nfunction isPlainChildren(props) {\n  return typeof props.children !== 'function';\n}\n/**\r\n ## Render props\r\n\n To use the `<InView>` component, you pass it a function. It will be called\r\n whenever the state changes, with the new value of `inView`. In addition to the\r\n `inView` prop, children also receive a `ref` that should be set on the\r\n containing DOM element. This is the element that the IntersectionObserver will\r\n monitor.\r\n\n If you need it, you can also access the\r\n [`IntersectionObserverEntry`](https://developer.mozilla.org/en-US/docs/Web/API/IntersectionObserverEntry)\r\n on `entry`, giving you access to all the details about the current intersection\r\n state.\r\n\n ```jsx\r\n import { InView } from 'react-intersection-observer';\r\n\n const Component = () => (\r\n <InView>\r\n {({ inView, ref, entry }) => (\r\n      <div ref={ref}>\r\n        <h2>{`Header inside viewport ${inView}.`}</h2>\r\n      </div>\r\n    )}\r\n </InView>\r\n );\r\n\n export default Component;\r\n ```\r\n\n ## Plain children\r\n\n You can pass any element to the `<InView />`, and it will handle creating the\r\n wrapping DOM element. Add a handler to the `onChange` method, and control the\r\n state in your own component. Any extra props you add to `<InView>` will be\r\n passed to the HTML element, allowing you set the `className`, `style`, etc.\r\n\n ```jsx\r\n import { InView } from 'react-intersection-observer';\r\n\n const Component = () => (\r\n <InView as=\"div\" onChange={(inView, entry) => console.log('Inview:', inView)}>\r\n <h2>Plain children are always rendered. Use onChange to monitor state.</h2>\r\n </InView>\r\n );\r\n\n export default Component;\r\n ```\r\n */\n\n\nclass InView extends React.Component {\n  constructor(props) {\n    super(props);\n    this.node = null;\n    this._unobserveCb = null;\n\n    this.handleNode = node => {\n      if (this.node) {\n        // Clear the old observer, before we start observing a new element\n        this.unobserve();\n\n        if (!node && !this.props.triggerOnce && !this.props.skip) {\n          // Reset the state if we get a new node, and we aren't ignoring updates\n          this.setState({\n            inView: !!this.props.initialInView,\n            entry: undefined\n          });\n        }\n      }\n\n      this.node = node ? node : null;\n      this.observeNode();\n    };\n\n    this.handleChange = (inView, entry) => {\n      if (inView && this.props.triggerOnce) {\n        // If `triggerOnce` is true, we should stop observing the element.\n        this.unobserve();\n      }\n\n      if (!isPlainChildren(this.props)) {\n        // Store the current State, so we can pass it to the children in the next render update\n        // There's no reason to update the state for plain children, since it's not used in the rendering.\n        this.setState({\n          inView,\n          entry\n        });\n      }\n\n      if (this.props.onChange) {\n        // If the user is actively listening for onChange, always trigger it\n        this.props.onChange(inView, entry);\n      }\n    };\n\n    this.state = {\n      inView: !!props.initialInView,\n      entry: undefined\n    };\n  }\n\n  componentDidUpdate(prevProps) {\n    // If a IntersectionObserver option changed, reinit the observer\n    if (prevProps.rootMargin !== this.props.rootMargin || prevProps.root !== this.props.root || prevProps.threshold !== this.props.threshold || prevProps.skip !== this.props.skip || prevProps.trackVisibility !== this.props.trackVisibility || prevProps.delay !== this.props.delay) {\n      this.unobserve();\n      this.observeNode();\n    }\n  }\n\n  componentWillUnmount() {\n    this.unobserve();\n    this.node = null;\n  }\n\n  observeNode() {\n    if (!this.node || this.props.skip) return;\n    const {\n      threshold,\n      root,\n      rootMargin,\n      trackVisibility,\n      delay,\n      fallbackInView\n    } = this.props;\n    this._unobserveCb = observe(this.node, this.handleChange, {\n      threshold,\n      root,\n      rootMargin,\n      // @ts-ignore\n      trackVisibility,\n      // @ts-ignore\n      delay\n    }, fallbackInView);\n  }\n\n  unobserve() {\n    if (this._unobserveCb) {\n      this._unobserveCb();\n\n      this._unobserveCb = null;\n    }\n  }\n\n  render() {\n    if (!isPlainChildren(this.props)) {\n      const {\n        inView,\n        entry\n      } = this.state;\n      return this.props.children({\n        inView,\n        entry,\n        ref: this.handleNode\n      });\n    }\n\n    const _this$props = this.props,\n          {\n      children,\n      as\n    } = _this$props,\n          props = _objectWithoutPropertiesLoose(_this$props, _excluded);\n\n    return React.createElement(as || 'div', _extends({\n      ref: this.handleNode\n    }, props), children);\n  }\n\n}\n\n/**\r\n * React Hooks make it easy to monitor the `inView` state of your components. Call\r\n * the `useInView` hook with the (optional) [options](#options) you need. It will\r\n * return an array containing a `ref`, the `inView` status and the current\r\n * [`entry`](https://developer.mozilla.org/en-US/docs/Web/API/IntersectionObserverEntry).\r\n * Assign the `ref` to the DOM element you want to monitor, and the hook will\r\n * report the status.\r\n *\r\n * @example\r\n * ```jsx\r\n * import React from 'react';\r\n * import { useInView } from 'react-intersection-observer';\r\n *\r\n * const Component = () => {\r\n *   const { ref, inView, entry } = useInView({\r\n *       threshold: 0,\r\n *   });\r\n *\r\n *   return (\r\n *     <div ref={ref}>\r\n *       <h2>{`Header inside viewport ${inView}.`}</h2>\r\n *     </div>\r\n *   );\r\n * };\r\n * ```\r\n */\n\nfunction useInView({\n  threshold,\n  delay,\n  trackVisibility,\n  rootMargin,\n  root,\n  triggerOnce,\n  skip,\n  initialInView,\n  fallbackInView,\n  onChange\n} = {}) {\n  var _state$entry;\n\n  const [ref, setRef] = React.useState(null);\n  const callback = React.useRef();\n  const [state, setState] = React.useState({\n    inView: !!initialInView,\n    entry: undefined\n  }); // Store the onChange callback in a `ref`, so we can access the latest instance\n  // inside the `useEffect`, but without triggering a rerender.\n\n  callback.current = onChange;\n  React.useEffect(() => {\n    // Ensure we have node ref, and that we shouldn't skip observing\n    if (skip || !ref) return;\n    let unobserve = observe(ref, (inView, entry) => {\n      setState({\n        inView,\n        entry\n      });\n      if (callback.current) callback.current(inView, entry);\n\n      if (entry.isIntersecting && triggerOnce && unobserve) {\n        // If it should only trigger once, unobserve the element after it's inView\n        unobserve();\n        unobserve = undefined;\n      }\n    }, {\n      root,\n      rootMargin,\n      threshold,\n      // @ts-ignore\n      trackVisibility,\n      // @ts-ignore\n      delay\n    }, fallbackInView);\n    return () => {\n      if (unobserve) {\n        unobserve();\n      }\n    };\n  }, // We break the rule here, because we aren't including the actual `threshold` variable\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  [// If the threshold is an array, convert it to a string, so it won't change between renders.\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  Array.isArray(threshold) ? threshold.toString() : threshold, ref, root, rootMargin, triggerOnce, skip, trackVisibility, fallbackInView, delay]);\n  const entryTarget = (_state$entry = state.entry) == null ? void 0 : _state$entry.target;\n  React.useEffect(() => {\n    if (!ref && entryTarget && !triggerOnce && !skip) {\n      // If we don't have a node ref, then reset the state (unless the hook is set to only `triggerOnce` or `skip`)\n      // This ensures we correctly reflect the current state - If you aren't observing anything, then nothing is inView\n      setState({\n        inView: !!initialInView,\n        entry: undefined\n      });\n    }\n  }, [ref, entryTarget, triggerOnce, skip, initialInView]);\n  const result = [setRef, state.inView, state.entry]; // Support object destructuring, by adding the specific values.\n\n  result.ref = result[0];\n  result.inView = result[1];\n  result.entry = result[2];\n  return result;\n}\n\nexport { InView, defaultFallbackInView, observe, useInView };\n//# sourceMappingURL=react-intersection-observer.modern.mjs.map\n", "import React from 'react';\nimport { useInView } from 'react-intersection-observer';\n\ntype ProviderProps = React.PropsWithChildren;\n\nconst IntersectionObserverStateContext = React.createContext<\n  | {\n      elementObservedRef: (node?: Element | null | undefined) => void;\n      isInView: boolean;\n    }\n  | undefined\n>(undefined);\n\nfunction IntersectionObserverProvider({ children }: ProviderProps) {\n  const [ref, inView] = useInView({ threshold: 0 });\n\n  // NOTE: you *might* need to memoize this value\n  // Learn more in http://kcd.im/optimize-context\n  const value = {\n    elementObservedRef: ref,\n    isInView: inView\n  };\n\n  return (\n    <IntersectionObserverStateContext.Provider value={value}>\n      {children}\n    </IntersectionObserverStateContext.Provider>\n  );\n}\n\nfunction useIntersectionObserver() {\n  const context = React.useContext(IntersectionObserverStateContext);\n\n  if (context === undefined) {\n    throw new Error(\n      'useIntersectionObserver must be used within a IntersectionObserverProvider'\n    );\n  }\n\n  return context;\n}\n\nexport { IntersectionObserverProvider, useIntersectionObserver };\n", "export enum IntervalState {\n  IDLE,\n  RUNNING,\n  PAUSED,\n  RESUME\n}\n\n/**\n * `IntervalTimer` is a class that handles logic for intervals, e.g. start stop, reset, resume, pause & maximum amount of fires.\n */\nexport default class IntervalTimer {\n  /**\n   * The state to handle logic.\n   * - 0 means the interval is idle.\n   * - 1 means it's running.\n   * - 2 means it's paused\n   * - 3 will resume.\n   */\n  public state: IntervalState = IntervalState.IDLE;\n\n  /**\n   * Remaining time before the next interval.\n   */\n  public remaining: number = 0;\n\n  /**\n   * Amount of times fired.\n   */\n  public fires: number = 0;\n\n  /**\n   * Time passed after pausing,\n   */\n  public pausedTime: number | Date = 0;\n\n  private lastTimeFired?: Date;\n  private timerId?: NodeJS.Timer;\n  private resumeId?: NodeJS.Timeout;\n  private lastPauseTime?: Date;\n\n  private constructor(\n    /**\n     * Called after every interval.\n     */\n    public callback: () => void,\n    /**\n     * Time between intervals, in milliseconds.\n     */\n    public interval: number,\n    /**\n     * Maximum amount of fires.\n     */\n    public maxFires?: number\n  ) {}\n\n  /**\n   * Handles the callback execution, the amount of fires, & the times when fired.\n   * If `this.maxFires` is **not** null, and it's bigger than `this.fires` and if `this.fires` exists, meaning if it the interval was at least started once before, then never fire again.\n   */\n  private intervalHandler = () => {\n    if (\n      this.maxFires != null &&\n      this.fires !== 0 &&\n      this.fires >= this.maxFires\n    ) {\n      this.stop();\n    } else {\n      this.lastTimeFired = new Date();\n      this.fires += 1;\n      this.callback();\n    }\n  };\n\n  /**\n   * `timeoutHandler` is executed by `resume`. `timeoutHandler` is the callback of a new `setTimeout` executed by `resume` to mimic a resume function.\n   * The callback is executed by running `intervalHandler`, and then `start` is executed to run a new interval.\n   */\n  private timeoutHandler = () => {\n    if (this.state !== IntervalState.RESUME) return;\n\n    this.pausedTime = 0;\n    this.intervalHandler();\n    this.start();\n  };\n\n  /**\n   * `start` executes the interval, and saves the interval ID for further use.\n   * The time of execution is also fired in case it's paused later on. The state\n   * is finally set as running.\n   */\n  public start = () => {\n    this.timerId = setInterval(this.intervalHandler, this.interval);\n    this.lastTimeFired = new Date();\n    this.state = IntervalState.RUNNING;\n  };\n\n  /**\n   * `stop` clears every respective timeout and interval, then sets the state as idle.\n   */\n  public stop = () => {\n    if (this.state === 0) return;\n\n    clearInterval(this.timerId);\n    clearTimeout(this.resumeId);\n    this.state = IntervalState.IDLE;\n  };\n\n  /**\n   * Resets the interval.\n   */\n  public reset = () => {\n    this.stop();\n    this.start();\n  };\n\n  /**\n   * `pause` tries to mimic pausing the interval by calculating the remaining time and storing it\n   * in a member variable. Afterwards clear the respective timeout and interval then set the new\n   * state.\n   */\n  public pause = () => {\n    if (\n      this.state !== IntervalState.RUNNING &&\n      this.state !== IntervalState.RESUME\n    )\n      return;\n\n    this.remaining =\n      +this.interval -\n      (+new Date() - +(this.lastTimeFired || 0)) +\n      +this.pausedTime;\n    this.lastPauseTime = new Date();\n    clearInterval(this.timerId);\n    clearTimeout(this.resumeId);\n    this.state = IntervalState.PAUSED;\n  };\n\n  /**\n   * `resume` calculates the remaining time for the callback to trigger using the values\n   * set by `paused`. Will execute a new `setTimeout` while passing the `remaining` time\n   * as the timeout delay.\n   */\n  public resume = () => {\n    if (this.state !== IntervalState.PAUSED) return;\n    const currentDate = new Date();\n    this.pausedTime =\n      +this.pausedTime + +currentDate - +(this.lastPauseTime || 0);\n    this.state = IntervalState.RESUME;\n    this.resumeId = setTimeout(this.timeoutHandler, this.remaining);\n  };\n\n  /**\n   * Set a new interval to use on the next interval loop.\n   */\n  public setInterval = (newInterval: number) => {\n    if (this.state === 1) {\n      // If running we need to instantiate (new ID) the variable.\n      this.pause();\n      this.interval = newInterval;\n      this.resume();\n    } else {\n      // If stopped, idle, or paused then switch it.\n      this.interval = newInterval;\n    }\n  };\n\n  /**\n   * Maximum amount of times the `callback` member will execute, it's infinite by default.\n   */\n  public setMaxFires = (newMax: number) => {\n    if (newMax != null && this.fires >= newMax) {\n      this.stop();\n    }\n    this.maxFires = newMax;\n  };\n\n  private static instance: IntervalTimer | undefined;\n\n  public static new(\n    callback: () => void,\n    interval: number,\n    maxFires: number | undefined = undefined\n  ): IntervalTimer {\n    if (!this.instance)\n      this.instance = new IntervalTimer(callback, interval, maxFires);\n    else {\n      this.instance.callback = callback;\n      this.instance.interval = interval;\n      this.instance.maxFires = maxFires;\n    }\n    return this.instance;\n  }\n}\n", "import React from 'react';\n\nimport ConsoleLogger from './ConsoleLogger';\nimport { useController } from './Controller';\nimport { useIntersectionObserver } from './IntersectionObserver';\nimport IntervalTimer, { IntervalState } from './IntervalTimer';\n\nconst logger = ConsoleLogger.new();\n\ninterface Props {\n  /**\n   * Autoplay duration, interval or duration betweens slide transitions, in milliseconds.\n   * If it's lower than the sliding cycle duration (sliding duration + sliding delay), then the sliding cycle duration will be used instead.\n   * @default 8000\n   */\n  autoplayDuration?: number;\n  /**\n   * Time (in milliseconds) in which the autoplay will be debounced if the user interacts with the slider.\n   * The autoplay resumes if the user stops interacting after this duration.\n   * Set as 0 to disable this feature.\n   * @default 4000\n   */\n  autoplayDebounce?: number;\n}\n\nexport type AutoplayProps = Props | boolean;\n\ntype Action =\n  | { type: 'pause' }\n  | { type: 'resume' }\n  | { type: 'set-debounce-timeout'; payload: NodeJS.Timeout };\ninterface State {\n  isPausedByUser: boolean;\n  debounceTimeout?: NodeJS.Timeout;\n}\ntype ProviderProps = React.PropsWithChildren<{\n  autoplay?: AutoplayProps;\n}>;\n\nconst defaultProps: Required<Props> = {\n  autoplayDuration: 8000,\n  autoplayDebounce: 4000\n};\n\nconst AutoplayStateContext = React.createContext<\n  | {\n      state: State;\n      autoplayState: IntervalState;\n      debounce: () => void;\n      pause: () => void;\n      resume: () => void;\n    }\n  | undefined\n>(undefined);\n\nfunction autoplayReducer(state: State, action: Action): State {\n  switch (action.type) {\n    case 'pause': {\n      return { ...state, isPausedByUser: true };\n    }\n    case 'resume': {\n      return { ...state, isPausedByUser: false };\n    }\n    case 'set-debounce-timeout': {\n      return { ...state, debounceTimeout: action.payload };\n    }\n    default: {\n      throw new Error(`Unhandled action: [${JSON.stringify(action, null, 2)}]`);\n    }\n  }\n}\n\nfunction AutoplayProvider({ children, autoplay }: ProviderProps) {\n  const params: Required<Props> = {\n    autoplayDuration:\n      (typeof autoplay === 'object' ? autoplay?.autoplayDuration : undefined) ??\n      defaultProps.autoplayDuration,\n    autoplayDebounce:\n      (typeof autoplay === 'object' ? autoplay?.autoplayDebounce : undefined) ??\n      defaultProps.autoplayDebounce\n  };\n\n  const [state, dispatch] = React.useReducer(autoplayReducer, {\n    isPausedByUser: false,\n    debounceTimeout: undefined\n  } as State);\n\n  const {\n    state: controller,\n    changeSlide,\n    getNextSlide,\n    getSlidingCycleDuration\n  } = useController();\n\n  const slidingCycleDuration = getSlidingCycleDuration();\n\n  const autoplayCycleDuration = Math.max(\n    slidingCycleDuration,\n    params.autoplayDuration\n  );\n\n  if (params.autoplayDuration < getSlidingCycleDuration())\n    logger.warn(\n      '[Autoplay] The `autoplayDuration` is lower than the sliding cycle duration (the result of `slidingDuration + slidingDelay`).',\n      'The sliding cycle duration will be used instead for the autoplay intervals.'\n    );\n\n  const autoplayInstance = IntervalTimer.new((): void => {\n    changeSlide(getNextSlide(controller.activeSlide));\n  }, autoplayCycleDuration);\n\n  const { isInView } = useIntersectionObserver();\n\n  /**\n   * Debounces the autoplay interval whene called.\n   */\n  const debounce = (): void => {\n    const isPausedOrIdle =\n      autoplayInstance.state === IntervalState.IDLE || state.isPausedByUser;\n\n    if (isPausedOrIdle) return; // If the slider has been paused, do nothing.\n\n    autoplayInstance.pause();\n\n    if (state.debounceTimeout) clearTimeout(state.debounceTimeout);\n\n    dispatch({\n      type: 'set-debounce-timeout',\n      payload: setTimeout(autoplayInstance.resume, params.autoplayDebounce)\n    });\n  };\n\n  /**\n   * Pauses the autoplay.\n   */\n  const pause = (): void => {\n    logger.debug('[Autoplay] Paused by user.');\n    autoplayInstance.pause();\n    dispatch({ type: 'pause' });\n  };\n\n  /**\n   * Resumes the autoplay.\n   */\n  const resume = (): void => {\n    logger.debug('[Autoplay] Resumed by user.');\n    autoplayInstance.resume();\n    dispatch({ type: 'resume' });\n  };\n\n  /**\n   * When the user pauses the slider, clear any debounced timeouts.\n   */\n  React.useEffect(() => {\n    if (state.isPausedByUser) clearTimeout(state.debounceTimeout);\n    return () => {};\n  }, [state.isPausedByUser]);\n\n  /**\n   * Subscribe to changes in `autoplay` and `isInView`.\n   * If the slider goes out of the viewport, then pause the slider autoplay instance if it's not idle.\n   * If it comes back into viewport and its idle, start or resume the autoplay instance.\n   * If the autoplay is disabled, then stop.\n   */\n  React.useEffect(() => {\n    if (autoplay) {\n      switch (true) {\n        case state.isPausedByUser:\n          break;\n        // When not in view, stop the autoplay.\n        case !isInView && autoplayInstance.state !== IntervalState.IDLE:\n          autoplayInstance.stop();\n          logger.debug('[Autoplay] Stopped.');\n          break;\n        // When in view and idle, start it.\n        case isInView && autoplayInstance.state === IntervalState.IDLE: {\n          autoplayInstance.start();\n          logger.debug('[Autoplay] Started.');\n          break;\n        }\n        // When in view and paused, resume it.\n        case isInView && autoplayInstance.state === IntervalState.PAUSED: {\n          autoplayInstance.resume();\n          logger.debug('[Autoplay] Resumed.');\n          break;\n        }\n      }\n    } else if (autoplayInstance.state !== IntervalState.IDLE) {\n      autoplayInstance.stop();\n      logger.info('[Autoplay] Stopped.');\n    }\n  }, [autoplay, isInView]);\n\n  /**\n   * Clearing any existing timeouts to avoid memory leaks, and clear event listener.\n   */\n  React.useEffect(() => {\n    return () => {\n      clearTimeout(state.debounceTimeout);\n      autoplayInstance.stop();\n    };\n  }, []);\n\n  /**\n   * When the slide changes, clear any debounced timeouts, after the slide finishes, the\n   * autoplay resets.\n   */\n  React.useEffect(() => {\n    clearTimeout(state.debounceTimeout);\n    return () => {};\n  }, [controller.activeSlide]);\n\n  // NOTE: you *might* need to memoize this value\n  // Learn more in http://kcd.im/optimize-context\n  const value = {\n    state,\n    autoplayState: autoplayInstance.state,\n    debounce,\n    pause,\n    resume\n  };\n\n  return (\n    <AutoplayStateContext.Provider value={value}>\n      {children}\n    </AutoplayStateContext.Provider>\n  );\n}\n\nfunction useAutoplay() {\n  const context = React.useContext(AutoplayStateContext);\n\n  if (context === undefined) {\n    throw new Error('useAutoplay must be used within a AutoplayProvider');\n  }\n\n  return context;\n}\n\nexport { AutoplayProvider, useAutoplay };\n", "import type CSS from 'csstype';\nimport React from 'react';\n\nconst mobileThreshold = 1024;\n\ntype Action = {\n  type: 'update-slider-dimensions';\n};\ntype State = {\n  slider: React.RefObject<HTMLDivElement>;\n  width?: CSS.Properties['width'];\n  height?: CSS.Properties['height'];\n};\n\nconst LayoutStateContext = React.createContext<\n  { state: State; mobileThreshold: number } | undefined\n>(undefined);\n\nfunction layoutReducer(state: State, action: Action): State {\n  switch (action.type) {\n    case 'update-slider-dimensions': {\n      return {\n        slider: state.slider,\n        width: state.slider.current?.clientWidth as CSS.Properties['width'],\n        height: state.slider.current?.clientHeight as CSS.Properties['height']\n      };\n    }\n    default: {\n      throw new Error(`Unhandled action: [${JSON.stringify(action, null, 2)}]`);\n    }\n  }\n}\n\nfunction LayoutProvider({ children }: React.PropsWithChildren) {\n  const [state, dispatch] = React.useReducer(layoutReducer, {\n    slider: React.useRef<HTMLElement>(null),\n    width: undefined,\n    height: undefined\n  } as State);\n\n  /**\n   * After mounting, similar to `componentDidMount`, set up the window event listeners and update dimensions.\n   */\n  React.useEffect(() => {\n    function updateSliderDimensions() {\n      if (state.slider.current) dispatch({ type: 'update-slider-dimensions' });\n    }\n\n    updateSliderDimensions();\n\n    window.addEventListener(\n      'resize',\n      updateSliderDimensions as EventListenerOrEventListenerObject\n    );\n    /**\n     * Clearing event listener to avoid memory leaks.\n     */\n    return () => {\n      window.removeEventListener(\n        'resize',\n        updateSliderDimensions as EventListenerOrEventListenerObject\n      );\n    };\n  }, [state.slider.current]);\n\n  // NOTE: you *might* need to memoize this value\n  // Learn more in http://kcd.im/optimize-context\n  const value = { state, mobileThreshold };\n\n  return (\n    <LayoutStateContext.Provider value={value}>\n      {children}\n    </LayoutStateContext.Provider>\n  );\n}\n\nfunction useLayout() {\n  const context = React.useContext(LayoutStateContext);\n\n  if (context === undefined)\n    throw new Error('useLayout must be used within a LayoutProvider');\n\n  return context;\n}\n\nexport { LayoutProvider, useLayout };\n", "import type CSS from 'csstype';\nimport React from 'react';\n\nimport { PartiallyRequired } from '../utils/PartiallyRequired';\nimport ConsoleLogger, { LoggerLevels } from './ConsoleLogger';\n\nexport interface SettingsProps {\n  /**\n   * Sets up the `--slider-color` CSS variable.\n   * @default 'inherit'\n   */\n  sliderColor?: CSS.Properties['color'];\n  /**\n   * Inline CSS styling for the wrapper div element of the component.\n   * @default {}\n   */\n  sliderStyle?: Omit<CSS.Properties, 'width' | 'height'>;\n  /**\n   * Aesthetics settings. You can configure the base color and the active color of all nav components within the `HeroSlider`. They can be set individually as well.\n   * @default\n   * {\n   *    color: undefined,\n   *    activeColor: undefined\n   * }\n   */\n  navbarStyle?: {\n    color?: CSS.Properties['color'];\n    activeColor?: CSS.Properties['color'];\n  };\n  /**\n   * Debugger logs level. Only useful if you need insights.\n   * @default\n   * {\n   *    verbose: false,\n   *    info: false,\n   *    debug: false,\n   *    warnings: true,\n   *    errors: true\n   * }\n   */\n  debug?: LoggerLevels | undefined;\n}\n\nconst defaultProps: PartiallyRequired<SettingsProps, 'debug'> = {\n  sliderColor: 'inherit',\n  sliderStyle: {},\n  navbarStyle: {\n    color: undefined,\n    activeColor: undefined\n  }\n};\n\ntype ProviderProps = React.PropsWithChildren<{ settings?: SettingsProps }>;\n\nconst SettingsStateContext = React.createContext<\n  PartiallyRequired<SettingsProps, 'debug'> | undefined\n>(undefined);\n\nfunction SettingsProvider({ children, settings }: ProviderProps) {\n  const params: PartiallyRequired<SettingsProps, 'debug'> = {\n    sliderColor: settings?.sliderColor || defaultProps.sliderColor,\n    sliderStyle: settings?.sliderStyle || defaultProps.sliderStyle,\n    navbarStyle: settings?.navbarStyle || defaultProps.navbarStyle,\n    debug: settings?.debug\n  };\n\n  /**\n   * Set up ConsoleLogger whenever the `params.debug` change.\n   */\n  React.useEffect(() => {\n    ConsoleLogger.new(params.debug);\n  }, [params.debug]);\n\n  // NOTE: you *might* need to memoize this value\n  // Learn more in http://kcd.im/optimize-context\n  const value = params;\n\n  return (\n    <SettingsStateContext.Provider value={value}>\n      {children}\n    </SettingsStateContext.Provider>\n  );\n}\n\nfunction useSettings() {\n  const context = React.useContext(SettingsStateContext);\n\n  if (context === undefined) {\n    throw new Error('useSettings must be used within a SettingsProvider');\n  }\n\n  return context;\n}\n\nexport { SettingsProvider, useSettings };\n", "import React from 'react';\n\ntype CssClass = {\n  className: React.HTMLAttributes<HTMLElement>['className'];\n  useIf?: boolean;\n};\n\nexport function composeCssClasses(\n  ...classes: Array<string | CssClass | undefined>\n): React.HTMLAttributes<HTMLElement>['className'] {\n  return classes\n    .filter((i) => {\n      if (!i) return false;\n      else if (typeof i === 'string') return true;\n      else if (typeof i.useIf === 'boolean') return i.useIf;\n      else return true;\n    })\n    .map((i) => {\n      if (typeof i === 'string') return i;\n      else return i!.className;\n    })\n    .join(' ');\n}\n", "'use strict';\n\nObject.defineProperty(exports, '__esModule', { value: true });\n\nvar ButtonsModuleCss = {\"Wrapper\":\"index-module_Wrapper__ZIVLd\",\"Container\":\"index-module_Container__mtjRh\",\"Button\":\"index-module_Button__hkx4Z\",\"Horizontal\":\"index-module_Horizontal__8-P70\",\"Previous\":\"index-module_Previous__TaJVT\",\"Next\":\"index-module_Next__sFCHR\",\"Vertical\":\"index-module_Vertical__VyL0Y\"};\n\nexports[\"default\"] = ButtonsModuleCss;\n//# sourceMappingURL=index.module.css.js.map\n", "// eslint-disable-next-line @typescript-eslint/no-unused-vars\nimport React from 'react';\n\nimport {\n  AccessibilityOrientation,\n  useAccessibility\n} from '../../modules/Accessibility';\nimport { useController } from '../../modules/Controller';\nimport { useManager } from '../../modules/Manager';\nimport { composeCssClasses } from '../../utils/composeCssClasses';\nimport ButtonsModuleCss from './index.module.css';\n\nfunction ArrowSvg() {\n  return (\n    <svg\n      width=\"60px\"\n      height=\"60px\"\n      strokeWidth=\"5\"\n      version=\"1.1\"\n      viewBox=\"0 0 129 129\"\n    >\n      <g fill=\"currentColor\">\n        <path d=\"m40.4,121.3c-0.8,0.8-1.8,1.2-2.9,1.2s-2.1-0.4-2.9-1.2c-1.6-1.6-1.6-4.2 0-5.8l51-51-51-51c-1.6-1.6-1.6-4.2 0-5.8 1.6-1.6 4.2-1.6 5.8,0l53.9,53.9c1.6,1.6 1.6,4.2 0,5.8l-53.9,53.9z\" />\n      </g>\n    </svg>\n  );\n}\n\nexport default function Buttons() {\n  const {\n    state: { isMobile }\n  } = useManager();\n\n  const { orientation } = useAccessibility();\n\n  const { goToPreviousSlide, goToNextSlide } = useController();\n\n  if (isMobile) return null;\n\n  const isHorizontal = orientation === AccessibilityOrientation.HORIZONTAL;\n\n  return (\n    <>\n      {/* Previous */}\n      <div\n        data-testid=\"hero-slider-previous\"\n        className={composeCssClasses(\n          'hero-slider-previous',\n          ButtonsModuleCss.Previous,\n          ButtonsModuleCss.Wrapper,\n          { className: ButtonsModuleCss.Horizontal, useIf: isHorizontal },\n          { className: ButtonsModuleCss.Vertical, useIf: !isHorizontal }\n        )}\n      >\n        <div\n          className={composeCssClasses(\n            'hero-slider-previous-container',\n            ButtonsModuleCss.Container\n          )}\n        >\n          <button\n            data-testid=\"hero-slider-previous-button\"\n            className={composeCssClasses(\n              'hero-slider-previous-button',\n              ButtonsModuleCss.Button\n            )}\n            onClick={goToPreviousSlide}\n          >\n            <ArrowSvg />\n          </button>\n        </div>\n      </div>\n      {/* Next */}\n      <div\n        data-testid=\"hero-slider-next\"\n        className={composeCssClasses(\n          'hero-slider-next',\n          ButtonsModuleCss.Next,\n          ButtonsModuleCss.Wrapper,\n          { className: ButtonsModuleCss.Horizontal, useIf: isHorizontal },\n          { className: ButtonsModuleCss.Vertical, useIf: !isHorizontal }\n        )}\n      >\n        <div\n          className={composeCssClasses(\n            'hero-slider-next-container',\n            ButtonsModuleCss.Container\n          )}\n        >\n          <button\n            data-testid=\"hero-slider-next-button\"\n            className={composeCssClasses(\n              'hero-slider-next-button',\n              ButtonsModuleCss.Button\n            )}\n            onClick={goToNextSlide}\n          >\n            <ArrowSvg />\n          </button>\n        </div>\n      </div>\n    </>\n  );\n}\n", "import React from 'react';\nimport Buttons from './components/Buttons';\nimport { HeroSliderProps } from './HeroSlider';\nimport HeroSliderModuleCss from './HeroSlider.module.css';\nimport { useAccessibility } from './modules/Accessibility';\nimport { useAnimations } from './modules/Animations';\nimport { useAutoplay } from './modules/Autoplay';\nimport ConsoleLogger from './modules/ConsoleLogger';\nimport { useController } from './modules/Controller';\nimport { useIntersectionObserver } from './modules/IntersectionObserver';\nimport { useLayout } from './modules/Layout';\nimport { useSettings } from './modules/Settings';\nimport { composeCssClasses } from './utils/composeCssClasses';\n\nconst logger = ConsoleLogger.new();\n\nexport function Orchestrator({\n  className,\n  width = '100%',\n  height = '100vh',\n  style,\n  children\n}: React.PropsWithChildren<\n  Pick<HeroSliderProps, 'className' | 'width' | 'height' | 'style'>\n>) {\n  logger.info('[Orchestrator] rerender');\n\n  const { shouldDisplayButtons } = useAccessibility();\n  const { sliderFadeInDuration, navbarFadeInDuration, navbarFadeInDelay } =\n    useAnimations();\n  const { state: layout } = useLayout();\n  const { slidingDuration, slidingDelay, getSlidingCycleDuration } =\n    useController();\n  const settings = useSettings();\n  const { debounce } = useAutoplay();\n  const { onTouchStartHandler, onTouchMoveHandler, onTouchEndHandler } =\n    useAccessibility();\n  const { elementObservedRef } = useIntersectionObserver();\n\n  /**\n   * CSS variables for the transitions.\n   */\n  const cssVariables = {\n    '--sliding-duration': `${slidingDuration}ms`,\n    '--sliding-delay': `${slidingDelay}ms`,\n    '--slide-transition-delay': `${getSlidingCycleDuration()}ms`,\n    '--slider-width': layout.width ? `${layout.width}px` : undefined,\n    '--slider-height': layout.height ? `${layout.height}px` : undefined,\n    '--slider-color': settings.sliderColor,\n    '--slider-fade-in-duration': `${sliderFadeInDuration}ms`,\n    '--nav-fade-in-duration': `${navbarFadeInDuration}ms`,\n    '--nav-fade-in-delay': `${navbarFadeInDelay}ms`,\n    '--nav-background-color': settings.navbarStyle\n      ? settings.navbarStyle.color\n      : undefined,\n    '--nav-active-color': settings.navbarStyle\n      ? settings.navbarStyle.activeColor\n      : undefined,\n    '--mask-duration': `${getSlidingCycleDuration()}ms`\n  };\n\n  return (\n    <div\n      data-testid=\"hero-slider\"\n      className={composeCssClasses('hero-slider', className)}\n      ref={elementObservedRef}\n    >\n      <div\n        data-testid=\"hero-slider-wrapper\"\n        ref={layout.slider}\n        className={composeCssClasses(\n          'hero-slider-wrapper',\n          HeroSliderModuleCss.Wrapper\n        )}\n        onTouchStart={onTouchStartHandler}\n        onTouchMove={onTouchMoveHandler}\n        onTouchEnd={onTouchEndHandler}\n        onMouseMoveCapture={debounce}\n        style={{\n          ...(cssVariables as React.CSSProperties),\n          ...style,\n          width,\n          height\n        }}\n      >\n        {children}\n        {shouldDisplayButtons && <Buttons />}\n      </div>\n    </div>\n  );\n}\n", "import React from 'react';\nimport {\n  AccessibilityProps,\n  AccessibilityProvider\n} from './modules/Accessibility';\nimport { AnimationsProps, AnimationsProvider } from './modules/Animations';\nimport { AutoplayProps, AutoplayProvider } from './modules/Autoplay';\nimport { ControllerProps, ControllerProvider } from './modules/Controller';\nimport { IntersectionObserverProvider } from './modules/IntersectionObserver';\nimport { LayoutProvider } from './modules/Layout';\nimport { ManagerProps, ManagerProvider } from './modules/Manager';\nimport { SettingsProps, SettingsProvider } from './modules/Settings';\nimport { Orchestrator } from './Orchestrator';\n\n/**\n * `HeroSlider` props.\n */\nexport interface HeroSliderProps {\n  /**\n   * Slider className.\n   */\n  className?: React.HTMLProps<HTMLDivElement>['className'];\n  /**\n   * CSS property. Defines the width of the slider.\n   * @default '100%'\n   */\n  width?: React.CSSProperties['width'];\n  /**\n   * CSS property. Defines the height of the slider.\n   * @default '100vh'\n   */\n  height?: React.CSSProperties['height'];\n  /**\n   * Inline CSS styling.\n   */\n  style?: Omit<React.CSSProperties, 'width' | 'height'>;\n\n  // Modules\n  manager?: ManagerProps;\n  settings?: SettingsProps;\n  controller?: ControllerProps;\n  accessibility?: AccessibilityProps;\n  animations?: AnimationsProps;\n  autoplay?: AutoplayProps;\n}\n\nexport default function HeroSlider(\n  props: React.PropsWithChildren<HeroSliderProps>\n) {\n  return (\n    <LayoutProvider>\n      <ManagerProvider manager={props.manager}>\n        <SettingsProvider settings={props.settings}>\n          <ControllerProvider controller={props.controller}>\n            <AccessibilityProvider accessibility={props.accessibility}>\n              <AnimationsProvider animations={props.animations}>\n                <IntersectionObserverProvider>\n                  <AutoplayProvider autoplay={props.autoplay}>\n                    <Orchestrator\n                      className={props.className}\n                      width={props.width}\n                      height={props.height}\n                      style={props.style}\n                    >\n                      {props.children}\n                    </Orchestrator>\n                  </AutoplayProvider>\n                </IntersectionObserverProvider>\n              </AnimationsProvider>\n            </AccessibilityProvider>\n          </ControllerProvider>\n        </SettingsProvider>\n      </ManagerProvider>\n    </LayoutProvider>\n  );\n}\n"],
  "mappings": "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",
  "names": ["React", "_jsx", "React", "useManager", "_jsx", "AccessibilityOrientation", "React", "useController", "_jsx", "SlidingAnimation", "HeroSliderModuleCss", "React", "useAccessibility", "AccessibilityOrientation", "_jsx", "React", "React", "useInView", "_jsx", "IntervalState", "ConsoleLogger", "React", "useController", "IntervalTimer", "useIntersectionObserver", "IntervalState", "_jsx", "React", "_jsx", "React", "ConsoleLogger", "_jsx", "_jsx", "useManager", "useAccessibility", "useController", "AccessibilityOrientation", "_jsxs", "_Fragment", "composeCssClasses", "ButtonsModuleCss", "ConsoleLogger", "useAccessibility", "useAnimations", "useLayout", "useController", "useSettings", "useAutoplay", "useIntersectionObserver", "_jsx", "composeCssClasses", "_jsxs", "HeroSliderModuleCss", "Buttons", "_jsx", "LayoutProvider", "ManagerProvider", "SettingsProvider", "ControllerProvider", "AccessibilityProvider", "AnimationsProvider", "IntersectionObserverProvider", "AutoplayProvider", "Orchestrator"]
}
